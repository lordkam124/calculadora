// Declaracion de librerias.

#include <stdio.h>
#include <stdint.h>
#include "tm4c123gh6pm.h"
#include "PLL.h"
#include "Nokia5110.h"
#include "math.h"

// Declaracion de etiquetas
#define SW          GPIO_PORTF_DATA_R


void GPIOB_init(void);
void GPIOD_init(void);
void GPIOE_init(void);
void GPIOF_init(void);
void PortC_Init(void);
int dato_entrada(int dato);
int dato_entrada2(int dato2);
int contador_estado(unsigned long entrada);	
int contador_estado2(unsigned long entrada2);
unsigned char data_caracter(unsigned long data);
unsigned char enter_bot(unsigned long valor);
int calculadora(int num1, int num2,unsigned char operador);
void delay_ms(int delay);

int main(void)
{
  GPIOF_init();
	PortC_Init();
	GPIOD_init();
	GPIOB_init();
	

char buffer[20];

PLL_Init();
Nokia5110_Init();
Nokia5110_SetCursor(0,0);
Nokia5110_OutString("Uni Boyaca");
Nokia5110_SetCursor(0,2);
Nokia5110_OutString("++++2023++++");
Nokia5110_Clear();

int  entrada = 0;
int  entrada2 = 0;
unsigned char  caracter =0;
unsigned char enter =0 ;
int resultado =0;


while(1)
{ 
	enter = enter_bot(enter);
	Nokia5110_SetCursor(0,0);
	Nokia5110_OutString("*calcualdora");
	Nokia5110_SetCursor(0,1);
	Nokia5110_OutString("n1:");
	entrada = dato_entrada(entrada);
	delay_ms(50);
			Nokia5110_SetCursor(6,1);
	Nokia5110_OutString("n2:");
	entrada2 = dato_entrada2(entrada2);
	delay_ms(50);
			Nokia5110_SetCursor(0,2);
	Nokia5110_OutString("operador:");
	caracter =data_caracter(caracter);
	delay_ms(50);
	Nokia5110_SetCursor(0,3);
	Nokia5110_OutString("=");
	resultado=calculadora(entrada,entrada2,caracter);
	sprintf(buffer,"%d",resultado);
	Nokia5110_OutString(buffer);
	delay_ms(50);
	if(enter=='*')
	{	
	Nokia5110_Clear()	;
	}
	
}

}
 int   calculadora(int num1, int num2,unsigned char operador){
	 int  resultado =0;
	 if(operador=='+'){
		 resultado= (num1+num2);
		 
	 }
	 else if(operador=='-'){
		 resultado= (num1-num2);
		 
	 }
	 else if(operador=='x'){
		 resultado= (num1*num2);
		 
	 }
	 else if(operador=='/'){
		 resultado= (num1/num2);
		 
	 }
	 return resultado;
 
 }
unsigned char enter_bot(unsigned long valor){
	unsigned long entrada;
	unsigned long salida;
	 char c =0;
GPIO_PORTD_DATA_R = 0x0E;
	delay_ms(50);

	entrada = GPIO_PORTC_DATA_R; 
	salida = GPIO_PORTD_DATA_R;
	
 
 if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0E;
	 c='*';

	 
 }
	return c;
}
unsigned char data_caracter(unsigned long data){
unsigned long entrada;
	unsigned long salida;
	 char c =0;
	 char carater[20];

	entrada = GPIO_PORTC_DATA_R; 
	salida = GPIO_PORTD_DATA_R;
		
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	
 if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	  c='=';

	 sprintf(carater,"%c",c);
	  Nokia5110_OutString(carater);
 }
 GPIO_PORTD_DATA_R = 0x07;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0B;
		 c='+';

	 sprintf(carater,"%c",c);
	  Nokia5110_OutString(carater);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0C;
	  c='-';

	 sprintf(carater,"%c",c);
	  Nokia5110_OutString(carater);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0D;
	  c='x';

	 sprintf(carater,"%c",c);
	  Nokia5110_OutString(carater);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0E;
	 c='/';

	 sprintf(carater,"%c",c);
	  Nokia5110_OutString(carater);
 }
 return c;
  
}
int dato_entrada(int  dato)
{
 
	unsigned long entrada;
	unsigned long salida;
	int num;
	char numt[1];
	GPIO_PORTD_DATA_R = 0x0E;
	delay_ms(50);

	entrada = GPIO_PORTC_DATA_R; 
	salida = GPIO_PORTD_DATA_R;
	
 if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x01;
	  num = 1;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x04;
	 
	 num = 4;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x07;
	 num = 7;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	 
	GPIO_PORTD_DATA_R = 0x0D;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x02;
		num = 2;
		sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
		
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x05;
	 num = 5;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x08;
	  Nokia5110_OutString("8");
	 num = 8;
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	 num = 0;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x03;
		num = 3;
		sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x06;
	 num = 6;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x09;
	 num = 9;
	 sprintf(numt,"%d",num);
	  Nokia5110_OutString(numt);
 }	
	
	

return num;
		

} 
int  dato_entrada2(int dato2)
{
 
	unsigned long entrada;
	unsigned long salida;
	int num2;
	char numt[1];
		
	GPIO_PORTD_DATA_R = 0x0E;
	delay_ms(50);

	entrada = GPIO_PORTC_DATA_R; 
	salida = GPIO_PORTD_DATA_R;
	
 if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x01;
	  num2 = 1;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x04;
	 num2 = 4;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x07;
	 num2 = 7;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	 
	GPIO_PORTD_DATA_R = 0x0D;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x02;
		num2 = 2;
		sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x05;
	 num2 = 5;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x08;
	 num2 = 8;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	 num2 = 0;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x03;
		num2 = 3;
		sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x06;
	 num2 = 6;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x09;
	 num2 = 9;
	 sprintf(numt,"%d",num2);
	  Nokia5110_OutString(numt);
 }	 

return num2;

}
void GPIOB_init(void)
{
int delay;

// Configuracion del puerto B como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x02; // Habilita el reloj para el PORTB
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Habilita la escritura en los registros del PORTB
GPIO_PORTB_CR_R = 0xFF;

// No activa el modo analogo en PORTB
GPIO_PORTB_AMSEL_R = 0x00;

// No activa los perifericos en PORTB
GPIO_PORTB_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTB
// B7 - B6 - B5 - B4 - B3 - B2 - B1 - B0
//    DP - SG - SF - SE - SD - SC - SB - SA  
//   1 -  1 -  1 -  1 -  1 -  1 -  1 -  1 = 0xFF
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTB_DIR_R = 0xFF;

// No configura perifericos en el PORTB
GPIO_PORTB_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOB
GPIO_PORTB_PUR_R = 0x00;

// Habilita modo digital para PB0 a PB7
  GPIO_PORTB_DEN_R = 0xFF;

}

void GPIOD_init(void)
{
int delay;

// Configuracion del puerto D como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x08; // Habilita el reloj para el PORTD
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Configuracion del GPIO_LOCK
GPIO_PORTD_LOCK_R = GPIO_LOCK_KEY;

// Habilita la escritura en los registros del PORTD
GPIO_PORTD_CR_R = 0xFF;

// No activa el modo analogo en PORTD
GPIO_PORTD_AMSEL_R = 0x00;

// No activa los perifericos en PORTD
GPIO_PORTD_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTD
// D7 -   D6 - D5 - D4 - D3 - D2 - D1 - D0
//  DIG1 - DIG2 - XX - XX - T3 - T2 - T1 - T0  
//   1 -    1 -  1 -  1 -  1 -  1 -  1 -  1 = 0xFF
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTD_DIR_R = 0xFF;

// No configura perifericos en el PORTD
GPIO_PORTD_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOD
GPIO_PORTD_PUR_R = 0x00;

// Habilita modo digital para PD0 a PD7
GPIO_PORTD_DEN_R = 0xFF;

}

void GPIOE_init(void)
{
int delay;

// Configuracion del puerto E como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x10; // Habilita el reloj para el PORTE
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Habilita la escritura en los registros del PORTE
GPIO_PORTE_CR_R = 0xFF;

// No activa el modo analogo en PORTE
GPIO_PORTE_AMSEL_R = 0x00;

// No activa los perifericos en PORTE
GPIO_PORTE_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTE
// E7 - E6 -   E5 -   E4 - E3 - E2 -   E1 -    E0
//    XX - XX - DIG3 - DIG4 - XX - XX - LED9 - LED10  
//   0 -  0 -    1 -    1 -  1 -  1 -    1 -     1 = 0x3F
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTE_DIR_R = 0x3F;

// No configura perifericos en el PORTE
GPIO_PORTE_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOE
GPIO_PORTE_PUR_R = 0x00;

// Habilita modo digital para PB0 a PB7
  GPIO_PORTE_DEN_R = 0x3F;

}

void GPIOF_init(void)
{
int delay;

// Configuracion del puerto F como entrada

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x20; // Habilita el reloj para el PORTD
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Configuracion del GPIO_LOCK
GPIO_PORTF_LOCK_R = GPIO_LOCK_KEY;

// Habilita la escritura en los registros del PORTF
GPIO_PORTF_CR_R = 0xFF;

// No activa el modo analogo en PORTF
GPIO_PORTF_AMSEL_R = 0x00;

// No activa los perifericos en PORTF
GPIO_PORTF_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTF
// F7 - F6 - F5 - F4 - F3 - F2 - F1 - F0
//    XX - XX - XX - XX - P4 - P3 - P2 - P1  
//   0 -  0 -  0 -  0 -  0 -  0 -  0 -  0 = 0x00
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTF_DIR_R = 0x00;

// No configura perifericos en el PORTF
GPIO_PORTF_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOF
GPIO_PORTF_PUR_R = 0x00;

// Habilita modo digital para PF0 a PF3
  GPIO_PORTF_DEN_R = 0x0F;

}
void PortC_Init(void)
{ 
    volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000004;     // 1) F clock
  delay = SYSCTL_RCGC2_R;           // delay   
  GPIO_PORTC_CR_R |= 0xF0;           // allow changes to PC7 - PC4        
  GPIO_PORTC_AMSEL_R |= 0x00;        // 3) disable analog function
  GPIO_PORTC_PCTL_R |= 0x00000000;   // 4) GPIO clear bit PCTL  
  GPIO_PORTC_DIR_R &= 0x0F;          // 5) PC7 - PC4 input.   
  GPIO_PORTC_AFSEL_R |= 0x00;        // 6) no alternate function
  GPIO_PORTC_PUR_R |= 0xF0;          // Enable pullup resistors on PC7 - PC4       
  GPIO_PORTC_DEN_R |= 0xF0;          // 7) enable digital pins PC7 - PC4        
}

void delay_ms(int delay)
{
for(int i=0;i < delay; i++)
{
for(int j=0;j < 5333; j++)
{}
}
} 