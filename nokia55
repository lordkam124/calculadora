// Declaracion de librerias.

#include <stdio.h>
#include <stdint.h>
#include "tm4c123gh6pm.h"
#include "PLL.h"
#include "Nokia5110.h"
#include "math.h"

// Declaracion de etiquetas
#define SW          GPIO_PORTF_DATA_R


void GPIOB_init(void);
void GPIOD_init(void);
void GPIOE_init(void);
void GPIOF_init(void);
void PortC_Init(void);
int dato_entrada(unsigned long dato);
int  dato_entrada2(int num);
int  dato_entrada3(int num2);
char caracter(unsigned long data);
int calculadora(int N1,int N2,char po);
void delay_ms(int delay);

int main(void)
{
  GPIOF_init();
	PortC_Init();
	GPIOD_init();
	GPIOB_init();
PLL_Init();
Nokia5110_Init();
Nokia5110_SetCursor(0,0);
Nokia5110_OutString("Uni Boyaca");
Nokia5110_SetCursor(0,2);
Nokia5110_OutString("++++2023++++");
Nokia5110_Clear();

unsigned long entrada=0;
unsigned long car=0;
int R3=0;
int R2=0;
int R=0;
int t3=0;
int t2=0;
int t=0;
int n1=0;
int n2=0;
char oper=0;
int sal=0;
char buffer[20];

while(1)
{
	START:
	R = dato_entrada(entrada);
	if(R!=0){
		op:
	R2=dato_entrada2(R);
		if(R2!=0){
			op2:
			R3=dato_entrada3(R2);	
			n1=R3;
			if(n1!=0){
				op3:
			oper=caracter(car);
			if((oper=='A')||(oper=='B')||(oper=='C')||(oper=='D')){
				op4:
				t = dato_entrada(entrada);
				if(t!=0){
					op5:
				t2=dato_entrada2(t);
					if(t2!=0){
						t3=dato_entrada3(t2);	
						n2=t3;
						sal=calculadora(n1,n2,oper);
						sprintf(buffer,"%d",sal);
						Nokia5110_OutString(buffer);
						delay_ms(500);
						goto START;
						
						
					}
					else{
					goto op5;
					}
				}
				else{
				goto op4;
				}
			}
			else{
				goto op3;
			}
			}
			else{
			goto op2;
			}
		}
		else{
			goto op;
		}
	}
	else{
	goto START;
	}

}

}
int calculadora(int N1,int N2,char po){
	int resultado;
	if(po=='A'){
		resultado=(N1+N2);
	}
	else if(po=='B'){
		resultado=(N1-N2);
	}
	else if(po=='C'){
		resultado=(N1*N2);
	}
	else if(po=='D'){
		resultado=(N1/N2);
	}
	return resultado;

}
char caracter(unsigned long data)
{
 
	unsigned long entradaC;
	unsigned long salidaC;
	char cs[20];
	char c;
		
	GPIO_PORTD_DATA_R = 0x0E;
	delay_ms(50);

	entradaC = GPIO_PORTC_DATA_R; 
	salidaC = GPIO_PORTD_DATA_R;
		
 if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0E;
	 c='*';
		 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }
 
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
		 
 if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	 c='#';
	 	 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }
 GPIO_PORTD_DATA_R = 0x07;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0B;
	c='A';
			 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0C;
	 c='B';
	 	 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0D;
	 c='C';
	 	 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x0E;
	 c='D';
	 	 sprintf(cs,"%c",c);
			Nokia5110_OutString(cs);
 }
return c;

}

int  dato_entrada3(int num2){
unsigned long entradae;
	unsigned long salidae;
	char numN3[4];
	int num3;
	 GPIO_PORTD_DATA_R= 0x0E;
	delay_ms(50);
	entradae = GPIO_PORTC_DATA_R; 
	salidae = GPIO_PORTD_DATA_R;
	
 if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x01;
	 num3=(num2*10)+1;
		Nokia5110_Clear();
	 Nokia5110_OutUDec(num3);
	
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x04;
	  num3=(num2*10)+4;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x07;
	  num3=(num2*10)+7;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	 

	GPIO_PORTD_DATA_R = 0x0D;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x02;
		num3=(num2*10)+2;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x05;
	 num3=(num2*10)+5;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x08;
	  num3=(num2*10)+8;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	num3=(num2*10)+0;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x03;
	num3=(num2*10)+3;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x06;
	 num3=(num2*10)+6;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x09;
	num3=(num2*10)+9;
	 sprintf(numN3,"%d",num3);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN3);
 }
return num3; 
}
int  dato_entrada2(int num){
unsigned long entradat;
	unsigned long salidat;
	char numN2[3];
	int numt2;
	 GPIO_PORTD_DATA_R= 0x0E;
	delay_ms(50);
	entradat = GPIO_PORTC_DATA_R; 
	salidat = GPIO_PORTD_DATA_R;
	
 if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x01;
	 numt2=(num*10)+1;
		Nokia5110_Clear();
	 Nokia5110_OutUDec(numt2);
	
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x04;
	  numt2=(num*10)+4;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x07;
	  numt2=(num*10)+7;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	 

	GPIO_PORTD_DATA_R = 0x0D;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x02;
		numt2=(num*10)+2;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x05;
	 numt2=(num*10)+5;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x08;
	  numt2=(num*10)+8;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	numt2=(num*10)+0;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x03;
	numt2=(num*10)+3;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x06;
	 numt2=(num*10)+6;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x09;
	numt2=(num*10)+9;
	 sprintf(numN2,"%d",numt2);
		Nokia5110_Clear();
	 Nokia5110_OutString(numN2);
 }
return numt2; 
}
int  dato_entrada(unsigned long dato)
{
 
	unsigned long entrada1;
	unsigned long salida1;
	int num;
	char numN[2];
	 GPIO_PORTD_DATA_R= 0x0E;
	delay_ms(50);
	entrada1 = GPIO_PORTC_DATA_R; 
	salida1 = GPIO_PORTD_DATA_R;
	
 if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x01;
	 num=1;
	 Nokia5110_OutUDec(num);
	
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x04;
	  num=4;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x07;
	  num=7;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	 

	GPIO_PORTD_DATA_R = 0x0D;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x02;
		num=2;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x05;
	 num=5;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x08;
	  num=8;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	 
 else if((GPIO_PORTC_DATA_R&0x80)== 0x00){
	 GPIO_PORTB_DATA_R = 0x10;
	 num=0;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }
 GPIO_PORTD_DATA_R = 0x0B;
	delay_ms(50);
	if((GPIO_PORTC_DATA_R&0x10)== 0x00){
	 GPIO_PORTB_DATA_R = 0x03;
	num=3;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	
 else if((GPIO_PORTC_DATA_R&0x20)== 0x00){
	 GPIO_PORTB_DATA_R = 0x06;
	 num=6;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	
 else if((GPIO_PORTC_DATA_R&0x40)== 0x00){
	 GPIO_PORTB_DATA_R = 0x09;
	num=9;
	 sprintf(numN,"%d",num);
	 Nokia5110_OutString(numN);
 }	 
return num;
}
void GPIOB_init(void)
{
int delay;

// Configuracion del puerto B como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x02; // Habilita el reloj para el PORTB
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Habilita la escritura en los registros del PORTB
GPIO_PORTB_CR_R = 0xFF;

// No activa el modo analogo en PORTB
GPIO_PORTB_AMSEL_R = 0x00;

// No activa los perifericos en PORTB
GPIO_PORTB_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTB
// B7 - B6 - B5 - B4 - B3 - B2 - B1 - B0
//    DP - SG - SF - SE - SD - SC - SB - SA  
//   1 -  1 -  1 -  1 -  1 -  1 -  1 -  1 = 0xFF
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTB_DIR_R = 0xFF;

// No configura perifericos en el PORTB
GPIO_PORTB_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOB
GPIO_PORTB_PUR_R = 0x00;

// Habilita modo digital para PB0 a PB7
  GPIO_PORTB_DEN_R = 0xFF;

}

void GPIOD_init(void)
{
int delay;

// Configuracion del puerto D como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x08; // Habilita el reloj para el PORTD
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Configuracion del GPIO_LOCK
GPIO_PORTD_LOCK_R = GPIO_LOCK_KEY;

// Habilita la escritura en los registros del PORTD
GPIO_PORTD_CR_R = 0xFF;

// No activa el modo analogo en PORTD
GPIO_PORTD_AMSEL_R = 0x00;

// No activa los perifericos en PORTD
GPIO_PORTD_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTD
// D7 -   D6 - D5 - D4 - D3 - D2 - D1 - D0
//  DIG1 - DIG2 - XX - XX - T3 - T2 - T1 - T0  
//   1 -    1 -  1 -  1 -  1 -  1 -  1 -  1 = 0xFF
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTD_DIR_R = 0xFF;

// No configura perifericos en el PORTD
GPIO_PORTD_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOD
GPIO_PORTD_PUR_R = 0x00;

// Habilita modo digital para PD0 a PD7
GPIO_PORTD_DEN_R = 0xFF;

}

void GPIOE_init(void)
{
int delay;

// Configuracion del puerto E como salida

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x10; // Habilita el reloj para el PORTE
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Habilita la escritura en los registros del PORTE
GPIO_PORTE_CR_R = 0xFF;

// No activa el modo analogo en PORTE
GPIO_PORTE_AMSEL_R = 0x00;

// No activa los perifericos en PORTE
GPIO_PORTE_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTE
// E7 - E6 -   E5 -   E4 - E3 - E2 -   E1 -    E0
//    XX - XX - DIG3 - DIG4 - XX - XX - LED9 - LED10  
//   0 -  0 -    1 -    1 -  1 -  1 -    1 -     1 = 0x3F
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTE_DIR_R = 0x3F;

// No configura perifericos en el PORTE
GPIO_PORTE_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOE
GPIO_PORTE_PUR_R = 0x00;

// Habilita modo digital para PB0 a PB7
  GPIO_PORTE_DEN_R = 0x3F;

}

void GPIOF_init(void)
{
int delay;

// Configuracion del puerto F como entrada

SYSCTL_RCGC2_R = SYSCTL_RCGC2_R | 0x20; // Habilita el reloj para el PORTD
delay = (int)SYSCTL_RCGC2_R; // Delay de 3 ciclos.
delay++;

// Configuracion del GPIO_LOCK
GPIO_PORTF_LOCK_R = GPIO_LOCK_KEY;

// Habilita la escritura en los registros del PORTF
GPIO_PORTF_CR_R = 0xFF;

// No activa el modo analogo en PORTF
GPIO_PORTF_AMSEL_R = 0x00;

// No activa los perifericos en PORTF
GPIO_PORTF_PCTL_R = 0x00000000;

// Configura entrada y salidas I/O en PORTF
// F7 - F6 - F5 - F4 - F3 - F2 - F1 - F0
//    XX - XX - XX - XX - P4 - P3 - P2 - P1  
//   0 -  0 -  0 -  0 -  0 -  0 -  0 -  0 = 0x00
// 0 = ENTRADA
// 1 = SALIDA

GPIO_PORTF_DIR_R = 0x00;

// No configura perifericos en el PORTF
GPIO_PORTF_AFSEL_R = 0x00;

// Desactiva pull-up para GPIOF
GPIO_PORTF_PUR_R = 0x00;

// Habilita modo digital para PF0 a PF3
  GPIO_PORTF_DEN_R = 0x0F;

}
void PortC_Init(void)
{ 
    volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000004;     // 1) F clock
  delay = SYSCTL_RCGC2_R;           // delay   
  GPIO_PORTC_CR_R |= 0xF0;           // allow changes to PC7 - PC4        
  GPIO_PORTC_AMSEL_R |= 0x00;        // 3) disable analog function
  GPIO_PORTC_PCTL_R |= 0x00000000;   // 4) GPIO clear bit PCTL  
  GPIO_PORTC_DIR_R &= 0x0F;          // 5) PC7 - PC4 input.   
  GPIO_PORTC_AFSEL_R |= 0x00;        // 6) no alternate function
  GPIO_PORTC_PUR_R |= 0xF0;          // Enable pullup resistors on PC7 - PC4       
  GPIO_PORTC_DEN_R |= 0xF0;          // 7) enable digital pins PC7 - PC4        
}

void delay_ms(int delay)
{
for(int i=0;i < delay; i++)
{
for(int j=0;j < 5333; j++)
{}
}
}